#How does the forest in these areas with the population served affected by the threats?
'''Does the data acurately describe the importance of surface drinking water to total threats?
Because I have the totals of the population, I plan to go through each region to see if there are any 
outliers that the data would not be able to portray. Basically seeing if all the p_vals of the regions are 
acurately representative of the overall data. - if the mean of the regions p_vals are within a .05 confidence 
level of the populations confidence level

Also seeing if development is the largest risk for our forests.'''

# norm distribution of total wli and pop
    # each region significatance value - graph - does it match the norm dist of the total.
    
  #use the IMP1 and mean water supply to determine where in the world the swli would potentially 
         #be affected by threats given the averages of US regions where the total population is served. 
    #picked a random water source, based on pop served to see the threat level of development 
    
    '''def pop_served_graphs_upper_lower(mid_lim, name_label, pop, huc_area): 
    #range of ints to set the graphs for starting - iterate over HUC's in the data. 
    fig, ax = plt.subplots(1, 4, sharey='row', figsize=(15, 10))
    df_imp0 = huc_area.loc[huc_area['HUC_12'] < mid_lim*100000000,'IMP1']
    df_lower = huc_area.loc[huc_area['HUC_12'] < mid_lim*100000000, 'HUC_12']
    df_imp1 = huc_area.loc[huc_area['HUC_12'] >= mid_lim*100000000,'IMP1']
    df_upper = huc_area.loc[huc_area['HUC_12'] >= mid_lim*100000000, 'HUC_12']
    ax[0].scatter(df_lower, df_imp0)
    ax[1].scatter(df_upper, df_imp1)
    ax[0].set_title('Water Level Importance: Lower', size=14)
    ax[1].set_title('Water Level Imporatnce: Upper', size=14)
    ax[0].set_ylabel('Level of Importance', size=14)
    mean = df_imp0 = huc_area.loc[huc_area['HUC_12'] < mid_lim*100000000,'IMP1'].mean()
    mean1 = df_imp0 = huc_area.loc[huc_area['HUC_12'] > mid_lim*100000000,'IMP1'].mean()
    ax[0].axhline(mean)
    ax[1].axhline(mean1)
    pop_80 = df_lower[df_lower['threats_per'] >= 80]
    pop_80 = df_upper[df_upper['threats_per'] >= 80]

    df_pop0 = pop.loc[pop['HUC_12'] < mid_lim*100000000,'IMP1']
    df_lower_pop = pop.loc[pop['HUC_12'] < mid_lim*100000000, 'HUC_12']
    df_pop1 = pop.loc[pop['HUC_12'] >= mid_lim*100000000,'IMP1']
    df_upper_pop = pop.loc[pop['HUC_12'] >= mid_lim*100000000, 'HUC_12']
    ax[2].scatter(df_lower_pop, df_pop0, color='green')
    ax[3].scatter(df_upper_pop, df_pop1, color='green')
    ax[2].set_title('Population Served: Lower', size=14, color='green')
    ax[3].set_title('Population Served: Upper', size=14, color='green')
    ax[2].set_ylabel('Level of High Importance for Population', size=14, color='green')
    pop_mean = pop.loc[pop['HUC_12'] < mid_lim*100000000,'IMP1'].mean()
    pop_mean1 = pop.loc[pop['HUC_12'] > mid_lim*100000000,'IMP1'].mean()
    #ax[2].scatter(pop_80['HUC_12'], pop_80['threats_per'], marker = 'x', color='red')
    #ax[3].scatter(pop_801['HUC_12'], pop_80['threats_per'], marker = 'x', color='red')
    ax[2].axhline(pop_mean)
    ax[3].axhline(pop_mean1)
    ax.axhline(q_model(huc_area).mean())
    plt.suptitle(name_label, size=16)
    plt.tight_layout()
    ax'''
    
    '''fig, ax = plt.subplots(1, 4, sharey='row', figsize=(15, 10))
df_imp0 = df_co.loc[df_co['HUC_12'] < 150000000000,'IMP1']
df_lower = df_co.loc[df_co['HUC_12'] < 150000000000, 'HUC_12']
df_imp1 = df_co.loc[df_co['HUC_12'] >= 150000000000,'IMP1']
df_upper = df_co.loc[df_co['HUC_12'] >= 150000000000, 'HUC_12']
ax[0].scatter(df_lower, df_imp0)
ax[1].scatter(df_upper, df_imp1)
ax[0].set_title('Water Level Importance: Lower', size=14)
ax[1].set_title('Water Level Imporatnce: Upper', size=14)
ax[0].set_ylabel('Level of Importance', size=14)
co_mean = df_imp0 = df_co.loc[df_co['HUC_12'] < 150000000000,'IMP1'].mean()
co_mean1 = df_imp0 = df_co.loc[df_co['HUC_12'] > 150000000000,'IMP1'].mean()
ax[0].axhline(co_mean)
ax[1].axhline(co_mean1)


df_pop0 = pop.loc[pop['HUC_12'] < 150000000000,'IMP1']
df_lower_pop = pop.loc[pop['HUC_12'] < 150000000000, 'HUC_12']
df_pop1 = pop.loc[pop['HUC_12'] >= 150000000000,'IMP1']
df_upper_pop = pop.loc[pop['HUC_12'] >= 150000000000, 'HUC_12']
ax[2].scatter(df_lower_pop, df_pop0, color='green')
ax[3].scatter(df_upper_pop, df_pop1, color='green')
ax[2].set_title('Population Served: Lower', size=14, color='green')
ax[3].set_title('Population Served: Upper', size=14, color='green')
ax[2].set_ylabel('Level of High Importance for Population', size=14, color='green')
pop_mean = pop.loc[pop['HUC_12'] < 150000000000,'IMP1'].mean()
pop_mean1 = pop.loc[pop['HUC_12'] > 150000000000,'IMP1'].mean()
ax[2].axhline(pop_mean)
ax[3].axhline(pop_mean1)
plt.suptitle('Colorado River', size=16)
plt.tight_layout()

'''

# sum the threaten rows of fire, development and insect/disease 
df['threats_per'] = df['INS_FOR3'] + df['DEV_FOR3'] + df['FIR_FOR3']
df['per_forest'] = df['PER_NFS2'] + df['PER_PRI2'] + df['PER_PRONF2'] + df['PER_FOR2']
threats = df[df['threats_per'] > 0.0]
threat_100_pop = df[(df['threats_per'] >= 100.0) & (df['POPSERVED'] > 0) & (df['POPSERVED'] > 0.0)] #85
threat_100 = df[(df['threats_per'] >= 100.0)] #432

threat_150_pop = df[(df['threats_per'] >= 150.0) & (df['POPSERVED'] > 0.0) & df['POPSERVED'] > 0] # 2
threat_150 = df[(df['threats_per'] >= 150.0)] #27
#to see how many areas need priory for remedy

threat_75_pop = df[(df['threats_per'] >= 75.0) & (df['threats_per'] < 100.0) & df['POPSERVED'] > 0] #50
threat_75 = df[(df['threats_per'] >= 75.0) & (df['threats_per'] < 100.0)] #1070

threat_50to75 = df[(df['threats_per'] >= 50.0) & (df['threats_per'] < 75.0)] #3446
threat_50to75_pop = df[(df['threats_per'] >= 50.0) & (df['threats_per'] < 75.0) & df['POPSERVED'] > 0]#137


regions = {100: 'New England', 200: 'Mid-Atlantic', 300: 'South Atlantic-Gulf',400: 'Great Lakes', 500: 'Ohio', 6: 'Tennessee', 700: 'Upper Mississippi', 800: 'Lower Mississippi', 900: 'Souris-Red-Rainy', 1000: 'Missouri', 1100: 'Arkansas-White-Red', 1200: 'Texas-Gulf', 1300: 'Rio Grande', 1400: 'Upper Colorado', 1500: 'Lower Colorado', 1600: 'Great Basin', 1700: 'Pacific Northwest', 1800: 'California', 1900: 'Alaska'}
test = huc_area(df, 100, 200, 'IMP1')
threat_50to75_pop[['HUC_12', 'threats_per']]
tes = huc_area(threat_50to75_pop, 100, 200, 'IMP1')
te = huc_area(threat_50to75_pop, 100, 200, 'threats_per')
'''
def regions(df):
    lst = list(range(10000000000, 200000000000, 10000000000))
    pass

def regions(df):
    d = {}
    for k, v in regions_dict.items():
        pass
lst = list(range(10000000000, 200000000000, 10000000000))
for x in lst:
    i = huc_area(df, x, x+10000000000, 'IMP1')
'''


#starts with 101 (11 digits) 10100081107
#ends with 190 (12 digits) 190605030907